;; Variables ;;

(defpoll volume_val :interval "1s" :initial "0" "./bar/scripts/volumectl.sh get-vol")
(defpoll volume_mute :interval "1s" :initial "no" "./bar/scripts/volumectl.sh get-mute")
(defpoll volume_info :interval "1s" :initial "{}" "./bar/scripts/volumectl.sh get-info")
(defpoll time :interval "60s" :initial "Time unknown" "date '+%H:%M %b %d, %Y'")

(defvar battery_low_class "")
(defvar battery_low_threshold 15)
(defpoll a :interval "0s" :run-while {EWW_BATTERY.BAT0.capacity <= battery_low_threshold} "./bar/scripts/battery_class.sh")

(deflisten network_data :initial "[{}]" "./bar/scripts/networkctl.sh monitor")

; updated through ./bar/scripts/hypr_listener.sh
(defvar workspace_data "[{}]")
(defvar activewindow_fullscreen "false")

(defvar power false) ; switch for reveal element

;; Widgets ;;

(defwidget applications []
  (button  :class "widget-box apps-box"
           :onclick "wofi &"
           :timeout "3s"
           :valign "center"
    (label :text " Apps")))


(defwidget battery []
  (box :class "widget-box battery-box ${battery_low_class} ${EWW_BATTERY.BAT0.status == 'Charging' ? 'battery-box-charging' : ''}"
       :valign "center"
    (_battery :status {EWW_BATTERY.BAT0.status}
              :capacity {EWW_BATTERY.BAT0.capacity})))


(defwidget cpu_graph []
  (box :space-evenly false
    (label :class "widget-box cpu-usage-label"
           :space-evenly false
           :spacing 10
           :valign "center"
           :text "CPU: ${EWW_TEMPS.CORETEMP_PACKAGE_ID_0}°C")
    (box :class "graph cpu-usage-graph"
         :valign "fill"
         :width 60
      (_graph_0_100 :value {EWW_CPU.avg}))))


(defwidget network []
  (button :class "widget-box network-box"
          :valign "center"
          :onclick "./bar/scripts/networkctl.sh open-ctl"
    (box ; need a container here since button can only have a single child
      (box :class "network-box-connnected"
           :space-evenly false
           :tooltip "${network_data.iface} | ${network_data.network}"
           :visible {network_data.status == "connected"}
        (label :text "${network_data.icon} ")
        (_network_speed :up {EWW_NET[network_data.iface].NET_UP}
                        :down {EWW_NET[network_data.iface].NET_DOWN}))
      (box :class "network-box-disconnnected"
           :space-evenly false
           :visible {network_data.status != "connected"}
        (label :text "${network_data.icon} ${network_data.status}")))))


(defwidget notifications-bar []
  (button :class "widget-box"
          :valign "center"
          :onclick "eww open notifications_window"
          :onrightclick "eww close notifications_window"
    ""))


(defwidget time []
  (box :class "widget-box time-box"
       :valign "center"
       :orientation "h"
    (label :text "${time}")))


(defwidget volume []
  (box :class "widget-box volume-box"
       :valign "center"
    (button :onclick "./bar/scripts/volumectl.sh open-ctl"
            :onmiddleclick "./bar/scripts/volumectl.sh set-sink-mute"
      (label :text "${volume_info.mute_out == 'yes' ? "婢" : volume_info.vol_out < 25 ? "奄" : volume_info.vol_out < 60 ? "奔" : "墳"} ${volume_info.vol_out}% "))
    (button :onclick "./bar/scripts/volumectl.sh open-ctl"
            :onmiddleclick "./bar/scripts/volumectl.sh set-source-mute"
      (label :text "${volume_info.mute_mic == 'yes' ? '' : ''} ${volume_info.vol_mic}%"))))


(defwidget window_deco []
  (box :class "widget-box"
       :valign "center"
    (button :class "button close_window_button"
            :onclick "hyprctl dispatch killactive 1"
            :style "color: #f7768e;"
      "")
    (button :class "button maximize_window_button"
            :onclick "hyprctl dispatch fullscreen 1"
            :style "${activewindow_fullscreen == 'true' ? 'color:#000;background-color:#e0af68;border-radius:3px' : 'color:#e0af68;'}"
      "")
    (button :class "button pin_window_button"
            :onclick "hyprctl dispatch pin 1"
            :style "color: #565f89;"
      "")))

(defwidget workspaces []
  (box :class "widget-box workspaces-box"
       :orientation "h"
       :width 50
       :valign "center"
       :halign "center"
       :space-evenly false
    (for ws in workspace_data
      (box :class "${ws.css_class}"
           :orientation "h"
           :space-evenly false
        (button :onclick "hyprctl dispatch workspace ${ws.name}"
          (label :text "|${ws.name}|"))
        (for client in {ws.clients}
          (button :onclick "focuswindow_for_real.sh ${client.address}"
                  :tooltip "${client.class} | PID: ${client.pid}"
                  :class {client.active ? "selected" : ""}
            (image :path "${client.icon_path}"
                   :image-height 20)))))))
