(defwidget _battery [capacity status]
  (box :class "battery-label"
       :space-evenly false
    (label :text {status == 'Charging' ? "" : capacity <= battery_low_threshold ? "" :  ""})
    (label :text {capacity < 15 ? "  " : capacity < 30 ? "  " : capacity < 60 ? "  " : capacity < 90 ? "  " : "  "})
    (label :text "${capacity}%")))


(defwidget _graph_0_100 [value]
  (graph :value value
         :thickness 2.0
         :time-range "30s"
         :min 0
         :max 100
         :dynamic true
         :line-style "round"))


(defwidget _network_speed [up down]
  (box :class "network-speed-label" :space-evenly false
    ; for some reason EWW_NET reports double of what is actually going through
    ; (label :text "RAW:(${round(up / 2, 0)}/${round(down / 2, 0)})")
    ; if 1Mbps <= up|down < 10Mbps; round to 1 decimal place (1.0), otherwise round to 0 decimal places (10)
    (label :text "|")
    (label :text {replace("⇧  ${round(up / 2000000, 1) >= 10 ? round(up / 2000000, 0) : round(up / 2000000, 1) >= 1 ? round(up / 2000000, 1) : round(up / 2000, 1) >= 1 ? round(up / 2000, 0) : round(up / 2, 0)}", " *([0-9. ]{3})", "\\1")})
    (label :text {round(up / 2000000, 1) >= 1 ? 'M' : round(up / 2000, 1) >= 1 ? 'K' : 'B'})
    (label :text "|")
    (label :text {replace("⇩  ${round(down / 2000000, 1) >= 10 ? round(down / 2000000, 0) : round(down / 2000000, 1) >= 1 ? round(down / 2000000, 1) : round(down / 2000, 1) >= 1 ? round(down / 2000, 0) : round(down / 2, 0)}", " *([0-9. ]{3})", "\\1")})
    (label :text {round(down / 2000000, 1) >= 1 ? 'M' : round(down / 2000, 1) >= 1 ? 'K' : 'B'})
    (label :text "|")))


(defwidget _volume [mute volume]
  (label :class "volume-label"
         :text "${mute == 'yes' ? "婢" : volume < 25 ? "奄" : volume < 60 ? "奔" : "墳"} ${volume}%"))
